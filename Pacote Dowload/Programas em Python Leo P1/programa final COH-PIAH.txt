import re


def le_assinatura():
    '''A funcao le os valores dos tracos linguisticos do modelo e devolve uma assinatura a ser comparada com os textos fornecidos'''
    print("Bem-vindo ao detector automático de COH-PIAH.")
    print("Informe a assinatura típica de um aluno infectado:")

    wal = float(input("Entre o tamanho médio de palavra:"))
    ttr = float(input("Entre a relação Type-Token:"))
    hlr = float(input("Entre a Razão Hapax Legomana:"))
    sal = float(input("Entre o tamanho médio de sentença:"))
    sac = float(input("Entre a complexidade média da sentença:"))
    pal = float(input("Entre o tamanho medio de frase:"))

    return [wal, ttr, hlr, sal, sac, pal]



def le_textos():
    '''A funcao le todos os textos a serem comparados e devolve uma lista contendo cada texto como um elemento'''
    i = 1
    textos = []
    texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")
    while texto:
        textos.append(texto)
        i += 1
        texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")

    return textos



def separa_sentencas(texto):
    '''A funcao recebe um texto e devolve uma lista das sentencas dentro do texto'''
    sentencas = re.split(r'[.!?]+', texto)
    if sentencas[-1] == '':
        del sentencas[-1]
    return sentencas



def separa_frases(sentenca):
    '''A funcao recebe uma sentenca e devolve uma lista das frases dentro da sentenca'''
    return re.split(r'[,:;]+', sentenca)



def separa_palavras(frase):
    '''A funcao recebe uma frase e devolve uma lista das palavras dentro da frase'''
    return frase.split()



def n_palavras_unicas(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras que aparecem uma unica vez'''
    freq = dict()
    unicas = 0
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            if freq[p] == 1:
                unicas -= 1
            freq[p] += 1
        else:
            freq[p] = 1
            unicas += 1

    return unicas



def n_palavras_diferentes(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras diferentes utilizadas'''
    freq = dict()
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            freq[p] += 1
        else:
            freq[p] = 1

    return len(freq)
    


# Essa funcao recebe um texto e deve devolver a assinatura do texto
def calcula_assinatura(texto):
  
    lista_frases = []
    lista_palavras = []
    lista_sentencas = []
   
    lista_sentencas = separa_sentencas(texto)
    for sentenca in lista_sentencas:
        lista_frases.extend(separa_frases(sentenca))

    for frase in lista_frases:
        lista_palavras.extend(separa_palavras(frase))

    soma_tamanhos_palavras = sum(len(palavra) for palavra in lista_palavras)
  
    total_palavras = len(lista_palavras)
    t1_a = soma_tamanhos_palavras / total_palavras

    t2_a = n_palavras_diferentes(lista_palavras) / total_palavras
      
    t3_a = n_palavras_unicas(lista_palavras) / total_palavras
    
    soma_tamanhos_sentencas = 0
    for sentenca in lista_sentencas:
        soma_tamanhos_sentencas = soma_tamanhos_sentencas + len(sentenca)
      
    total_sentencas = len(lista_sentencas)
    t4_a = soma_tamanhos_sentencas / total_sentencas
    
    total_frases = len(lista_frases)
    t5_a = total_frases / total_sentencas
    
    soma_tamanhos_frases = 0
    for frase in lista_frases:
        soma_tamanhos_frases = soma_tamanhos_frases + len(frase)
          
    t6_a = soma_tamanhos_frases / total_frases
    
    return [t1_a, t2_a, t3_a, t4_a, t5_a, t6_a]

    
    
    
# Essa funcao recebe duas assinaturas de texto e deve devolver o grau de similaridade nas assinaturas
def compara_assinatura(as_a, as_b):
  
    q = 0
    i = 0
    while i < 6:
        q = q + (abs(as_a[i] - as_b[i]))
        i = i + 1
  
    return q / 6

# Essa funcao recebe uma lista de textos e uma assinatura ass_cp e deve devolver o numero (1 a n) do texto com maior probabilidade de ter sido infectado por COH-PIAH
def avalia_textos(lista_textos, as_b):
  
    tamanho_textos = len(lista_textos)

    assinaturas_A = []

    i = 0
    graus_similaridade = []
    graus_similaridade_ordenado = []
    for texto in lista_textos:
        assinaturas_A = (calcula_assinatura(texto))
        graus_similaridade.append(compara_assinatura(assinaturas_A, as_b))

    graus_similaridade_ordenado = sorted(graus_similaridade)
    numero_texto_infectado = graus_similaridade.index(graus_similaridade_ordenado[0]) + 1
    return numero_texto_infectado

def chama ():

    as_b = le_assinatura()
    lista_textos = le_textos()
    numero_texto_infectado = avalia_textos(lista_textos, as_b)
    print ('O autor do texto', numero_texto_infectado,'está infectado com COH-PIAH')
  
chama()